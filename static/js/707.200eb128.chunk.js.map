{"version":3,"file":"static/js/707.200eb128.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/Contactlist/ContactList.styled.jsx","components/Contactlist/ContactList.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  margin: 10px;\n  width: 400px;\n`;\n\nexport const Input = styled.input`\n  margin-left: 10px;\n  border-bottom: solid 2px;\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  height: 20px;\n  width: 300px;\n  &:focus {\n    outline: none;\n    color: DeepSkyBlue;\n  }\n`;\n\nexport const Forms = styled.form`\n  width: 400px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nexport const Button = styled.button`\n  width: 130px;\n  height: 40px;\n  color: #000;\n  border-radius: 5px;\n  padding: 10px 25px;\n  font-family: 'Lato', sans-serif;\n  font-weight: 500;\n  background: transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  display: inline-block;\n  box-shadow: inset 2px 2px 2px 0px rgba(255, 255, 255, 0.5),\n    7px 7px 20px 0px rgba(0, 0, 0, 0.1), 4px 4px 5px 0px rgba(0, 0, 0, 0.1);\n  outline: none;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filters;\nexport const getIsLoading = state => state.contacts.isLoading\nexport const getError = state => state.contacts.error;\n","import { Label, Input, Forms, Button } from './ContactForm.styled';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operation';\nimport { getContacts } from 'redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n  const contactsName = items.map(contact => contact.name);\n\n  const handleChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n\n      case 'phone':\n        setPhone(event.currentTarget.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleContactsCreate = event => {\n    event.preventDefault();\n    if (contactsName.includes(name)) {\n      alert('данный контакт уже существует');\n      return;\n    } else dispatch(addContact({ name, phone }));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Forms onSubmit={handleContactsCreate}>\n      <Label>\n        Name\n        <Input\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Phone\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <p>\n        <Button type=\"submit\">Add contact</Button>\n      </p>\n    </Forms>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  margin: 10px;\n  wihth: 0px;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 400px\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  margin-left: 10px;\n  border-bottom: solid 2px;\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  height: 20px;\n  &:focus {\n    outline: none;\n    color: DeepSkyBlue;\n  }\n`;\n","import React from 'react';\nimport { Label, Input } from './Filter.styled';\nimport { filterContacts } from 'redux/filterSlise';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(filterContacts(event.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by Name\n      <Input\n        type=\"text\"\n        name=\"find\"\n        onChange={changeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  width: 80px;\n  height: 20px;\n  color: #000;\n  border-radius: 5px;\n  font-family: 'Lato', sans-serif;\n  font-weight: 500;\n  background: transparent;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  display: inline-block;\n  box-shadow: inset 2px 2px 2px 0px rgba(255, 255, 255, 0.5),\n    7px 7px 20px 0px rgba(0, 0, 0, 0.1), 4px 4px 5px 0px rgba(0, 0, 0, 0.1);\n  outline: none;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const BtnDel = styled.button`\n  font-size: 18px;\n  border: none;\n  background: none;\n  color: red;\n  display: flex;\n`;\n\nexport const Item = styled.li`\n  font-size: 18px;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  height: 30px;\n  border-bottom: dotted 2px;\n`;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operation';\nimport { getError, getIsLoading } from 'redux/selectors';\nimport { deleteContact } from 'redux/operation';\nimport { MdAccountCircle, MdHighlightOff } from 'react-icons/md';\nimport { List, BtnDel, Item } from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter).toLowerCase();\n  const filteredContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter)\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const deleteContactId = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      <List>\n        {filteredContacts.length > 0 &&\n          filteredContacts.map(({ id, name, phone }) => (\n            <Item key={id}>\n              <MdAccountCircle style={{ fontSize: '20px' }} />\n              {name}, {phone}{' '}\n              <BtnDel onClick={() => deleteContactId(id)}>\n                <MdHighlightOff style={{ fontSize: '20px' }} />\n              </BtnDel>\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/Contactlist/ContactList';\nimport { MdMenuBook } from 'react-icons/md';\n\nconst Contacts = () => {\n  return (\n    <>\n      <h2>\n        <MdMenuBook />\n        Phonebook\n      </h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Label","styled","Input","Forms","Button","getContacts","state","contacts","items","getFilter","filters","getIsLoading","isLoading","getError","error","ContactForm","useState","name","setName","phone","setPhone","dispatch","useDispatch","contactsName","useSelector","map","contact","handleChange","event","currentTarget","value","onSubmit","preventDefault","includes","alert","addContact","type","onChange","pattern","title","required","filterContacts","List","BtnDel","Item","filter","toLowerCase","filteredContacts","item","useEffect","fetchContacts","length","id","style","fontSize","onClick","contactId","deleteContact"],"sourceRoot":""}